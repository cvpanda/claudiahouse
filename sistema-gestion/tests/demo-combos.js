/**
 * DEMO: C√≥mo funciona la creaci√≥n de combos y agrupaciones
 * 
 * Este es un ejemplo pr√°ctico de c√≥mo usar la funcionalidad de combos
 * que ya est√° implementada en la API.
 */

// ================================
// 1. VENTA CON PRODUCTOS SIMPLES
// ================================
const ventaSimple = {
  "items": [
    {
      "productId": "producto-cafe-123",
      "quantity": 2,
      "unitPrice": 5.00
    },
    {
      "productId": "producto-pan-456", 
      "quantity": 1,
      "unitPrice": 3.00
    }
  ],
  "total": 13.00,
  "paymentMethod": "cash"
};

// ================================
// 2. VENTA CON COMBO
// ================================
const ventaConCombo = {
  "items": [
    {
      "itemType": "combo",
      "displayName": "Combo Desayuno Completo",
      "quantity": 2,
      "unitPrice": 12.00,
      "components": [
        { "productId": "producto-cafe-123", "quantity": 1 },   // 1 caf√© por combo
        { "productId": "producto-pan-456", "quantity": 2 },    // 2 panes por combo
        { "productId": "producto-mermelada-789", "quantity": 1 } // 1 mermelada por combo
      ]
    }
  ],
  "total": 24.00, // 2 combos x $12
  "paymentMethod": "cash"
};

// ================================
// 3. VENTA CON AGRUPACI√ìN
// ================================
const ventaConAgrupacion = {
  "items": [
    {
      "itemType": "grouped",
      "displayName": "Pack Limpieza Hogar",
      "quantity": 1,
      "unitPrice": 25.00, // Suma de precios individuales
      "components": [
        { "productId": "detergente-001", "quantity": 1 },
        { "productId": "lavandina-002", "quantity": 1 },
        { "productId": "esponja-003", "quantity": 3 }
      ]
    }
  ],
  "total": 25.00,
  "paymentMethod": "cash"
};

// ================================
// 4. VENTA MIXTA (Simple + Combo + Agrupaci√≥n)
// ================================
const ventaMixta = {
  "items": [
    // Producto simple
    {
      "productId": "producto-individual-999",
      "quantity": 1,
      "unitPrice": 8.00
    },
    // Combo
    {
      "itemType": "combo",
      "displayName": "Combo Desayuno",
      "quantity": 1,
      "unitPrice": 12.00,
      "components": [
        { "productId": "producto-cafe-123", "quantity": 1 },
        { "productId": "producto-pan-456", "quantity": 2 }
      ]
    },
    // Agrupaci√≥n
    {
      "itemType": "grouped",
      "displayName": "Pack Limpieza",
      "quantity": 1,
      "unitPrice": 25.00,
      "components": [
        { "productId": "detergente-001", "quantity": 1 },
        { "productId": "lavandina-002", "quantity": 1 }
      ]
    }
  ],
  "total": 45.00, // $8 + $12 + $25
  "paymentMethod": "cash"
};

// ================================
// C√ìMO PROBAR
// ================================

console.log("üß™ EJEMPLOS DE USO - COMBOS Y AGRUPACIONES");
console.log("=" .repeat(50));

console.log("\n1Ô∏è‚É£ VENTA SIMPLE:");
console.log("üì± POST /api/sales");
console.log(JSON.stringify(ventaSimple, null, 2));

console.log("\n2Ô∏è‚É£ VENTA CON COMBO:");
console.log("üì± POST /api/sales");
console.log(JSON.stringify(ventaConCombo, null, 2));

console.log("\n3Ô∏è‚É£ VENTA CON AGRUPACI√ìN:");
console.log("üì± POST /api/sales");
console.log(JSON.stringify(ventaConAgrupacion, null, 2));

console.log("\n4Ô∏è‚É£ VENTA MIXTA:");
console.log("üì± POST /api/sales");
console.log(JSON.stringify(ventaMixta, null, 2));

console.log("\n" + "=" .repeat(50));
console.log("üí° DIFERENCIAS CLAVE:");
console.log("‚îú‚îÄ‚îÄ COMBO: Precio especial para conjunto de productos");
console.log("‚îú‚îÄ‚îÄ AGRUPACI√ìN: Precio = suma de precios individuales");
console.log("‚îú‚îÄ‚îÄ SIMPLE: Un solo producto");
console.log("‚îî‚îÄ‚îÄ MIXTA: Combinaci√≥n de todos los tipos");

console.log("\nüîÑ GESTI√ìN DE STOCK:");
console.log("‚îú‚îÄ‚îÄ Venta: Reduce stock de componentes individuales");
console.log("‚îú‚îÄ‚îÄ Cancelaci√≥n: Devuelve stock a componentes");
console.log("‚îî‚îÄ‚îÄ Verificaci√≥n: Valida stock antes de crear venta");

// ================================
// FUNCIONES HELPER PARA TESTING
// ================================

/**
 * Funci√≥n para crear una venta de prueba
 */
async function crearVentaDePrueba(ventaData) {
  try {
    const response = await fetch('http://localhost:3000/api/sales', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(ventaData),
    });

    if (response.ok) {
      const result = await response.json();
      console.log(`‚úÖ Venta creada: ${result.data.saleNumber}`);
      return result.data;
    } else {
      const error = await response.text();
      console.log(`‚ùå Error: ${error}`);
    }
  } catch (error) {
    console.log(`üí• Error de conexi√≥n: ${error.message}`);
  }
}

/**
 * Funci√≥n para cancelar una venta
 */
async function cancelarVenta(saleId) {
  try {
    const response = await fetch(`http://localhost:3000/api/sales/${saleId}`, {
      method: 'DELETE',
    });

    if (response.ok) {
      const result = await response.json();
      console.log(`‚úÖ ${result.message}`);
      return result;
    } else {
      const error = await response.text();
      console.log(`‚ùå Error cancelando: ${error}`);
    }
  } catch (error) {
    console.log(`üí• Error de conexi√≥n: ${error.message}`);
  }
}

// Exportar para uso en otros archivos
if (typeof module !== 'undefined' && module.exports) {
  module.exports = {
    ventaSimple,
    ventaConCombo,
    ventaConAgrupacion,
    ventaMixta,
    crearVentaDePrueba,
    cancelarVenta,
  };
}
