generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_DATABASE_URL")
}

model Supplier {
  id        String   @id @default(cuid())
  name      String
  contact   String?
  phone     String?
  email     String?
  address   String?
  cuit      String?
  country   String   @default("Argentina")
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products  Product[]
  purchases Purchase[]

  @@map("suppliers")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  code        String   @unique // Siglas de 3 letras para generar SKU
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[]

  @@map("categories")
}

model Product {
  id             String   @id @default(cuid())
  name           String
  description    String?
  sku            String?  @unique
  barcode        String?  @unique
  cost           Float    @default(0)
  wholesalePrice Float    @default(0)
  retailPrice    Float    @default(0)
  stock          Int      @default(0)
  minStock       Int      @default(0)
  maxStock       Int?
  unit           String   @default("unit")
  imageUrl       String?
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  supplierId String
  supplier   Supplier @relation(fields: [supplierId], references: [id])

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  saleItems         SaleItem[]
  saleItemComponents SaleItemComponent[]
  purchaseItems     PurchaseItem[]
  stockMovements    StockMovement[]

  @@map("products")
}

model Customer {
  id           String   @id @default(cuid())
  name         String
  email        String?
  phone        String?
  address      String?
  postalCode   String?
  province     String?
  city         String?
  country      String   @default("Argentina")
  cuit         String?
  customerType String   @default("retail")
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  sales            Sale[]
  shippingBranches ShippingBranch[]

  @@map("customers")
}

model ShippingBranch {
  id         String   @id @default(cuid())
  name       String   // Nombre de la sucursal
  address    String
  province   String
  city       String
  postalCode String
  branchCode String?  // Código de la sucursal del correo
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relación con ventas que usan esta sucursal
  sales Sale[]

  @@map("shipping_branches")
}

model Sale {
  id            String   @id @default(cuid())
  saleNumber    String   @unique
  total         Float
  subtotal      Float
  tax           Float    @default(0)
  discount      Float    @default(0)
  shippingCost  Float    @default(0)
  shippingType  String?
  paymentMethod String   @default("cash")
  status        String   @default("completed")
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id])

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  // Sucursal de envío (opcional)
  shippingBranchId String?
  shippingBranch   ShippingBranch? @relation(fields: [shippingBranchId], references: [id])

  saleItems SaleItem[]

  @@map("sales")
}

model SaleItem {
  id         String @id @default(cuid())
  quantity   Int
  unitPrice  Float
  totalPrice Float

  // Nuevo: Tipo de item de venta
  itemType          String  @default("simple") // "simple" | "combo" | "grouped" | "custom"
  displayName       String? // Nombre personalizado para combos/agrupaciones
  customDescription String? // Descripción para productos personalizados

  saleId String
  sale   Sale   @relation(fields: [saleId], references: [id], onDelete: Cascade)

  // Para items simples
  productId String?
  product   Product? @relation(fields: [productId], references: [id])

  // Para combos/agrupaciones - componentes individuales
  components SaleItemComponent[]

  @@map("sale_items")
}

model SaleItemComponent {
  id       String @id @default(cuid())
  quantity Int    // Cantidad de este producto en el combo/agrupación

  saleItemId String
  saleItem   SaleItem @relation(fields: [saleItemId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@map("sale_item_components")
}

model StockMovement {
  id        String   @id @default(cuid())
  type      String
  quantity  Int
  reason    String?
  reference String?
  createdAt DateTime @default(now())

  productId String
  product   Product @relation(fields: [productId], references: [id])

  @@map("stock_movements")
}

model Purchase {
  id             String   @id @default(cuid())
  purchaseNumber String   @unique
  supplierId     String
  supplier       Supplier @relation(fields: [supplierId], references: [id])

  // Tipo de compra
  type String @default("LOCAL") // LOCAL | IMPORT

  // Datos de importación
  currency     String? // ARS | USD | EUR | BRL | CNY
  exchangeRate Float? // Tipo de cambio específico a pesos
  exchangeType String? // "Oficial", "Blue", "MEP", "CCL", etc.

  // Costos de importación en pesos
  freightCost   Float? @default(0) // Flete
  customsCost   Float? @default(0) // Gastos aduaneros  
  taxCost       Float? @default(0) // Impuestos (DJAI, etc.)
  insuranceCost Float? @default(0) // Seguro
  otherCosts    Float? @default(0) // Otros gastos

  // Totales
  subtotalForeign Float? // Subtotal en moneda extranjera
  subtotalPesos   Float // Subtotal convertido a pesos
  totalCosts      Float  @default(0) // Suma de costos adicionales
  total           Float // Total final en pesos

  // Estados y fechas
  status       String    @default("PENDING") // PENDING | ORDERED | SHIPPED | CUSTOMS | RECEIVED | COMPLETED | CANCELLED
  orderDate    DateTime
  expectedDate DateTime?
  receivedDate DateTime?

  // Relaciones
  items PurchaseItem[]

  // Metadatos
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("purchases")
}

model PurchaseItem {
  id         String   @id @default(cuid())
  purchaseId String
  purchase   Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id])

  quantity         Int
  unitPriceForeign Float? // Precio unitario en moneda extranjera
  unitPricePesos   Float // Precio unitario en pesos
  distributedCosts Float  @default(0) // Costos de importación distribuidos
  finalUnitCost    Float // Costo unitario final (precio + costos distribuidos)
  totalCost        Float // finalUnitCost × quantity

  // Metadatos
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("purchase_items")
}

// Authentication and Authorization Models
model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  isActive  Boolean   @default(true)
  lastLogin DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  roleId String
  role   Role   @relation(fields: [roleId], references: [id])
  sales  Sale[] // Ventas creadas por este usuario

  @@map("users")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isSystem    Boolean  @default(false) // Roles del sistema (no se pueden eliminar)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users       User[]
  permissions RolePermission[]

  @@map("roles")
}

model Permission {
  id          String   @id @default(cuid())
  module      String // "products", "sales", "purchases", "customers", "reports", "settings"
  action      String // "view", "create", "edit", "delete", "export"
  description String?
  createdAt   DateTime @default(now())

  // Relations
  roles RolePermission[]

  @@unique([module, action])
  @@map("permissions")
}

model RolePermission {
  id           String   @id @default(cuid())
  roleId       String
  permissionId String
  granted      Boolean  @default(true)
  createdAt    DateTime @default(now())

  // Relations
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}
